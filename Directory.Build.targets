<Project>
  <!-- Properties which should be set after the project has been evaluated -->
  <PropertyGroup>
    <RuntimeFrameworkVersion Condition=" '$(TargetFramework)' == 'netcoreapp3.0' ">$(MicrosoftNETCoreAppPackageVersion)</RuntimeFrameworkVersion>
  </PropertyGroup>

  <!-- Properties which should be set after the project has been evaluated -->
  <PropertyGroup Condition=" '$(MSBuildProjectExtension)' == '.csproj' ">
    <PackageId Condition=" '$(PackageId)' == '' ">$(AssemblyName)</PackageId>
    <Description Condition=" '$(Description)' == ''">$(PackageId)</Description>
    <IsPackable Condition="'$(IsPackable)' == '' AND ( '$(IsUnitTestProject)' == 'true' OR '$(IsTestAssetProject)' == 'true' OR '$(IsBenchmarkProject)' == 'true' OR '$(IsSampleProject)' == 'true' ) ">false</IsPackable>
    <IsPackable Condition="'$(IsPackable)' == '' ">true</IsPackable>
    <HasReferenceAssembly Condition="'$(IsPackable)' == 'false' OR '$(IsShipping)' == 'false'">false</HasReferenceAssembly>
  </PropertyGroup>

  <Import Project="eng\Baseline.Designer.props" />

  <PropertyGroup Condition=" '$(IsPackable)' != 'false' AND '$(IsServicingBuild)' == 'true' ">
    <IsPackable>$(PackagesInPatch.Contains(' $(PackageId);'))</IsPackable>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsPackable)' == 'true' AND '$(BaselinePackageVersion)' != '' AND '$(IsServicingBuild)' == 'true' ">
    <!-- This keeps assembly versions consistent across patches. If a package is not included in a patch, its assembly version should stay at the baseline. -->
    <AssemblyVersion>$(BaselinePackageVersion).0</AssemblyVersion>
    <!--
      Ideally, we would also set the project version to match the baseline in case NuGet turns a ProjectReference into a nuspec depenendency, but
      NuGet does not currently handle conflicts between packages and projects which have the same package id/version.

      See https://github.com/NuGet/Home/issues/6795
    -->
    <!-- <Version>$(BaselinePackageVersion)</Version> -->
    <!-- <PackageVersion>$(BaselinePackageVersion)</PackageVersion> -->
  </PropertyGroup>

  <PropertyGroup>
    <!-- Implementation projects are the projects which produce nuget packages or shipping assemblies. -->
    <IsImplementationProject Condition=" '$(IsImplementationProject)' == '' AND '$(IsTestAssetProject)' != 'true' AND '$(IsUnitTestProject)' != 'true' AND '$(IsBenchmarkProject)' != 'true' AND '$(IsSampleProject)' != 'true' ">true</IsImplementationProject>
    <!-- This determines whether a project is available as a <Reference> to other projects in this repo. -->
    <IsProjectReferenceProvider Condition=" '$(IsProjectReferenceProvider)' == '' AND '$(IsImplementationProject)' == 'true' AND '$(PackAsTool)' != 'true' AND '$(PackAsTool)' != 'true' AND '$(IsReferenceAssemblyProject)' == 'false' ">true</IsProjectReferenceProvider>
  </PropertyGroup>

  <Target Name="GenerateReferenceSource" Condition="'$(HasReferenceAssembly)' == 'true'">
    <PropertyGroup>
      <_RefSourceOutputPath>$([System.IO.Directory]::GetParent('$(MSBuildProjectDirectory)'))/ref/</_RefSourceOutputPath>
      <_RefProjectFileOutputPath>$(_RefSourceOutputPath)$(AssemblyName).csproj</_RefProjectFileOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <_AllTargetFrameworks Remove="@(_AllTargetFrameworks)" />
      <_AllTargetFrameworks Include="$(TargetFrameworks);$(TargetFramework)" />
      <_AllTargetFrameworks Remove="net46;net461;net471;net472" />
      <_DeduplicatedTargetFramework Include="%(_AllTargetFrameworks.Identity)" />
    </ItemGroup>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="_GenerateProjectSourceInner"
             Properties="TargetFramework=%(_DeduplicatedTargetFramework.Identity)">
      <Output TaskParameter="TargetOutputs" ItemName="ProjectListContentItem" />
    </MSBuild>

    <PropertyGroup>
      <ProjectListContentLines><![CDATA[
<!-- This file is automatically generated. -->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>@(_DeduplicatedTargetFramework)</TargetFrameworks>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
  </PropertyGroup>
  @(ProjectListContentItem->'%(Identity)', '%0A')
</Project>
]]></ProjectListContentLines>
    </PropertyGroup>

    <!-- Workaround https://github.com/Microsoft/msbuild/issues/1024 -->
    <WriteLinesToFile Condition="'$(OS)' == 'Windows_NT'"
                      File="$(_RefProjectFileOutputPath)" Lines="$([MSBuild]::Escape($(ProjectListContentLines)))" Overwrite="true" />
    <Exec Condition="'$(OS)' != 'Windows_NT'"
          Command="echo '$(ProjectListContentLines.Replace('\t','\\t'))' > $(_RefProjectFileOutputPath)" />

  </Target>

  <Target Name="_GenerateProjectSourceInner" Returns="@(ProjectListContent)" DependsOnTargets="Build">
    <PropertyGroup>
      <_RefSourceOutputPath>$([System.IO.Directory]::GetParent('$(MSBuildProjectDirectory)'))/ref/</_RefSourceOutputPath>
      <_RefSourceFileName>$(AssemblyName).$(TargetFramework).cs</_RefSourceFileName>
      <_RefSourceFileOutputPath>$(_RefSourceOutputPath)$(_RefSourceFileName)</_RefSourceFileOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <_ReferenceDirectoriesWithDuplicates Include="@(ReferencePath->'%(RootDir)%(Directory)'->TrimEnd('\'))" />
      <_ReferencePathDirectories Include="%(_ReferenceDirectoriesWithDuplicates.Identity)" />
    </ItemGroup>

    <PropertyGroup>
      <_GenAPICommand Condition="'$(MSBuildRuntimeType)' == 'core'">$(ToolHostCmd) --roll-forward-on-no-candidate-fx 2 "$(_GenAPIPath)"</_GenAPICommand>
      <_GenAPICmd>$(_GenAPICommand)</_GenAPICmd>
      <_GenAPICmd>$(_GenAPICmd) "$(OutputPath)\$(AssemblyName).dll"</_GenAPICmd>
      <_GenAPICmd>$(_GenAPICmd) --lib-path "@(_ReferencePathDirectories)"</_GenAPICmd>
      <_GenAPICmd>$(_GenAPICmd) --out "$(_RefSourceFileOutputPath)"</_GenAPICmd>
    </PropertyGroup>

    <MakeDir Directories="$(_RefSourceOutputPath)" />
    <Exec Command="$(_GenAPICmd)" />

    <ItemGroup>
      <FilteredOriginalReferences
        Include="%(OriginalReferences.Identity)"
        Condition="'%(OriginalReferences.NuGetPackageId)' == '' AND '%(OriginalReferences.PrivateAssets)' != 'All'" />
    </ItemGroup>

    <PropertyGroup>
      <ProjectListFile>$(MSBuildThisFileDirectory)..\eng\ProjectReferences.props</ProjectListFile>
      <RefsTargetFramework>$(TargetFrameworks)</RefsTargetFramework>
      <RefsTargetFramework Condition="'$(RefsTargetFramework)' == ''">$(TargetFramework)</RefsTargetFramework>

      <ReferencesContent>
      <![CDATA[
  <ItemGroup Condition="'%24(TargetFramework)' == '$(TargetFramework)'">
    <Compile Include="$(_RefSourceFileName)" />
    @(FilteredOriginalReferences->'<Reference Include="%(Identity)"  />', '%0A    ')
  </ItemGroup>
]]>
      </ReferencesContent>
    </PropertyGroup>

    <ItemGroup>
      <ProjectListContent Include="$(ReferencesContent)" />
    </ItemGroup>
  </Target>

  <Import Project="eng\targets\Packaging.targets" Condition=" '$(MSBuildProjectExtension)' == '.csproj' " />
  <Import Project="eng\targets\ResolveReferences.targets" Condition=" '$(DisableReferenceRestrictions)' != 'true' AND '$(MSBuildProjectExtension)' == '.csproj' " />
  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Arcade.Sdk" />
  <Import Project="eng\Workarounds.AfterArcade.targets" />

  <Import Project="eng\targets\Npm.Common.targets"  Condition="'$(MSBuildProjectExtension)' == '.npmproj'" />
</Project>
